########################################
#    Copyright 2007-2012, Matthias Fripp
#
#    This file is part of Switch (a power system planning model).
#
#    Switch is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3 
#    as published by the Free Software Foundation. Modified versions
#    of Switch must include this notice and the AUTHOR ATTRIBUTION
#    / CITATION notice below.
#
#    Switch is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Switch.  If not, see <http://www.gnu.org/licenses/>.
#
#    AUTHOR ATTRIBUTION / CITATION
#
#    In publications based on analysis conducted with Switch, please cite 
#    Matthias Fripp (2012), "Switch: A Planning Tool for Power Systems 
#    with Large Shares of Intermittent Renewable Energy", Environmental Science
#    & Technology 46 (11), pp 6371Ð6378, http://dx.doi.org/10.1021/es204645c
#
#    In presentations based on analysis conducted with Switch, please cite the
#    Switch project's website at http://www.switch-model.org
#
########################################

#######################
# store all hourly generation data in standardized, MW terms

# hourly power production from each source
# as well as total CO2 emissions per hour, heat rate, variable costs per MWh
# It might be better to report sub-components (CO2_per_mwh, variable_o_m and fuel_cost_hourly) instead of total emissions and variable costs
# (that would simplify the code here, but then the components would have to be multiplied and added in mysql later)

if num0($sensitivity_record_detailed_results) > 0 and length($sens_solution_file_stem) > 0 then {
  # this is being called from a sensitivity study; use a custom name for this study
  option outfile_stem ($sens_solution_file_stem);
} else {
  option outfile_stem ("results/");
};

let outfile := $outfile_stem & "power_" & carbon_cost & ".csv";

printf "scenario_name,carbon_cost,period,load_area,date,hour,technology,site,orientation,new,baseload,cogen,fuel,power,co2_tons,hours_in_sample,heat_rate\n"
  > (outfile);

# new dispatchable projects
# (21 seconds, 1.5 MB)
printf {(z, t, s, o) in PROJ_DISPATCH, h in HOURS} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, period[h], z, date[h], h, t, s, o, 1, 0, 0, fuel[t], 
  DispatchGen[z, t, s, o, h], 
  DispatchGen[z, t, s, o, h] * heat_rate[t]/1000 * carbon_content[fuel[t]],
  hours_in_sample[h],
  heat_rate[t]
  >> (outfile);


# new intermittent projects (all renewables, so no carbon emissions)
# (takes 114 seconds, 3 MB)
# note: we only report the total for each zone; totals for each site can be derived directly from the decision variables
printf {(z, t) in setof {(z1, t1, s1, o1) in PROJ_INTERMITTENT} (z1, t1), h in HOURS, p in PERIODS: period[h]=p}
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, t, "na", "na", 1, 0, 0, fuel[t], 
  (sum {(z, t, s, o, v, h) in PROJ_INTERMITTENT_VINTAGE_HOURS} 
    (1-forced_outage_rate[t]) * cap_factor[z, t, s, o, h] * InstallGen[z, t, s, o, v]),
  0,
  hours_in_sample[h],
  0
  >> (outfile);

# existing baseload plants
# (takes 178 seconds, 6 MB)
printf {(z, e, p) in EP_BASELOAD_PERIODS, h in HOURS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", e, "na", 0, ep_baseload[z, e], ep_cogen[z, e], ep_fuel[z, e],
  OperateEPDuringYear[z, e, p] * (1-ep_forced_outage_rate[z, e]) * (1-ep_scheduled_outage_rate[z, e]) * ep_size_mw[z, e],
  OperateEPDuringYear[z, e, p] * (1-ep_forced_outage_rate[z, e]) * (1-ep_scheduled_outage_rate[z, e]) * ep_size_mw[z, e] 
    * ep_heat_rate[z, e]/1000 * carbon_content[ep_fuel[z, e]],
  hours_in_sample[h],
  ep_heat_rate[z, e]
  >> (outfile);

# existing dispatchable plants
# (takes 109 seconds, 4 MB)
printf {(z, e, h) in EP_DISPATCH_HOURS, p in PERIODS: p=period[h]} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", e, "na", 0, ep_baseload[z, e], ep_cogen[z, e], ep_fuel[z, e],
  DispatchEP[z, e, h],
  DispatchEP[z, e, h] * ep_heat_rate[z, e] * carbon_content[ep_fuel[z, e]] / 1000,
  hours_in_sample[h],
  ep_heat_rate[z, e]
  >> (outfile);

# hydro pumping (6 sec)
printf {(z, s) in PROJ_PUMPED_HYDRO, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", s, "na", 0, 0, 0, "Hydro Pumping",
  -1 * (1 - forced_outage_rate_hydro) * (1/pumped_hydro_efficiency) * StorePumpedHydro[z, s, h],
  0, hours_in_sample[h], 0
  >> (outfile);

# hydro dispatch
# (61 s, 6 MB)
printf {(z, s) in PROJ_PUMPED_HYDRO, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", s, "na", 0, 0, 0, "Hydro",
  (1 - forced_outage_rate_hydro) * DispatchPumpedHydro[z, s, h],
  0, hours_in_sample[h], 0
  >> (outfile);
printf {z in LOAD_ZONES, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", "simple_hydro", "na", 0, 0, 0, "Hydro",
  (1 - forced_outage_rate_hydro) * 
   (min_hydro_dispatch_all_sites[z, date[h]] 
      + HydroDispatchShare[p, z, season_of_year[h], hour_of_day[h]]
        * (avg_hydro_dispatch_all_sites[z, date[h]] - min_hydro_dispatch_all_sites[z, date[h]]) * 24),
  0, hours_in_sample[h], 0
  >> (outfile);

# total imports and exports
# (38 seconds, 2 MB)
printf {z in LOAD_ZONES, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", "Transmission", "na", 0, 0, 0, "na",
#  (1-transmission_forced_outage_rate) *  
#    (sum {(z, z2) in TRANS_LINES} transmission_efficiency[z, z2] * (existing_transmission[z, z2] + sum {(z, z2, v, h) in TRANS_VINTAGE_HOURS} #InstallTrans[z, z2, v])
#    + sum {(z1, z) in TRANS_LINES} transmission_efficiency[z1, z] * (existing_transmission[z1, z] + sum {(z1, z, v, h) in TRANS_VINTAGE_HOURS} InstallTrans[z1, z, v])),
  (sum {(z, z2) in TRANS_LINES} (transmission_efficiency[z, z2] * DispatchTransTo[z, z2, h] - DispatchTransFrom[z, z2, h]))
  - (sum {(z1, z) in TRANS_LINES} (DispatchTransTo[z1, z, h] - transmission_efficiency[z1, z] * DispatchTransFrom[z1, z, h])),
  0, hours_in_sample[h], 0
  >> (outfile);

# transmission losses 
# (assigned to originating zone, so that generation+transmission = load+losses in each zone)
printf {z in LOAD_ZONES, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", "Transmission Losses", "na", 0, 0, 0, "na",
  (sum {(z, z2) in TRANS_LINES} ((1 - transmission_efficiency[z, z2]) * DispatchTransFrom[z, z2, h]))
  + (sum {(z1, z) in TRANS_LINES} ((1 - transmission_efficiency[z1, z]) * DispatchTransTo[z1, z, h])),
  0, hours_in_sample[h], 0
  >> (outfile);

# system load
printf {z in LOAD_ZONES, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", "Fixed Load", "na", 0, 0, 0, "na",
  system_load_fixed[z, h],
  0, hours_in_sample[h], 0
  >> (outfile);
printf {z in LOAD_ZONES, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", "Dispatched Load", "na", 0, 0, 0, "na",
  DispatchSystemLoad[z, h],
  0, hours_in_sample[h], 0
  >> (outfile);
printf {z in LOAD_ZONES, h in HOURS, p in PERIODS: period[h]=p} 
  "%s,%f,%d,%s,%d,%d,%s,%s,%s,%d,%d,%d,%s,%f,%f,%d,%f\n",
  scenario_name, carbon_cost, p, z, date[h], h, "na", "Price-Induced Load", "na", 0, 0, 0, "na",
  system_load_fixed[z, h] * (ClearAnnualDemand[z, period[h]]/max(annual_demand_quantity_base_mwh[z, period[h]], 1e-6) - 1),
  0, hours_in_sample[h], 0
  >> (outfile);

close (outfile);

#######################
# store all gen/trans capacity data in standardized, MW terms
# (these are quoted as total capacity installed up through each study period)

let outfile := $outfile_stem & "gen_cap_" & carbon_cost & ".csv";
printf "scenario_name,carbon_cost,period,load_area,technology,site,orientation,new,baseload,cogen,fuel,capacity\n" > (outfile);

# new projects (either intermittent or dispatchable)
# (this can be changed to just dispatchable or intermittent by using PROJ_DISPATCH or PROJ_INTERMITTENT instead of PROJECTS)
printf {(z, t, s, o) in PROJECTS, p in PERIODS: (max {(z, t, s, o, v) in PROJECT_VINTAGES} InstallGen[z, t, s, o, v]) > 0}
  "%s,%f,%d,%s,%s,%s,%s,%d,%d,%d,%s,%f\n",
  scenario_name, carbon_cost, p, z, t, s, o, 1, 0, 0, fuel[t],
  sum {(z, t, s, o, v) in PROJECT_VINTAGES: v <= p < project_end_year[t, v]} InstallGen[z, t, s, o, v]
  >> (outfile);

# existing plants (either baseload or dispatchable)
# note: they're only counted as "capacity" if they are operable during this period
# and baseload plants are assumed to be operable only up to 1-ep_scheduled_outage_rate
printf {(z, e, p) in EP_PERIODS}
  "%s,%f,%d,%s,%s,%s,%s,%d,%d,%d,%s,%f\n",
  scenario_name, carbon_cost, p, z, "na", e, "na", 0, ep_baseload[z, e], ep_cogen[z, e], ep_fuel[z, e],
  OperateEPDuringYear[z, e, p] * ep_size_mw[z, e] 
    * if ep_baseload[z, e] then (1-ep_scheduled_outage_rate[z, e]) else 1
  >> (outfile);

# hydro plants (pumped or simple)
# note: capacity is defined as the maximum possible output on any date in the period
# updated 9/15/08 to include the same fixed cost for hydro as in the Total_Cost objective function
printf {(z, s) in PROJ_HYDRO, p in PERIODS}
  "%s,%f,%d,%s,%s,%s,%s,%d,%d,%d,%s,%f\n",
  scenario_name, carbon_cost, p, z, "na", s, "na", 0, 0, 0, "Hydro",
  max {d in DATES, h in HOURS: date[h] = d and period[h] = p} max_hydro_flow[z, s, d]
  >> (outfile);

close (outfile);

########################
# store all trans capacity between zones
let outfile := $outfile_stem & "trans_cap_" & carbon_cost & ".csv";
printf "scenario_name,carbon_cost,period,start,end,tid,new,trans_mw\n" > (outfile);

# existing lines 
# TODO: update this if the main model is changed to retire existing lines when they reach transmission_max_age_years
# TODO: switch this to record the bidirectional capacities, instead of averaging them together
printf {(z1, z2) in TRANS_LINES, p in PERIODS}:
  '%s,%f,%d,"%s","%s",%d,%d,%f\n',
  scenario_name, carbon_cost, p, z1, z2, tid[z1, z2], 0, (existing_transmission_from[z1, z2]+existing_transmission_to[z1, z2])/2
  >> (outfile);

# new lines
printf {(z1, z2) in TRANS_LINES, p in PERIODS}:
  '%s,%f,%d,"%s","%s",%d,%d,%f\n',
  scenario_name, carbon_cost, p, z1, z2, tid[z1, z2], 1, sum {v in VINTAGE_YEARS: v <= p < transmission_end_year[v]} InstallTrans[z1, z2, v]
  >> (outfile);

close (outfile);


########################
# store local T&D capacity within each zone
let outfile := $outfile_stem & "local_td_cap_" & carbon_cost & ".csv";
printf "scenario_name,carbon_cost,period,load_area,local_td_mw,fixed_cost\n" > (outfile);

printf {p in PERIODS, z in LOAD_ZONES}:
  '%s,%f,%d,%s,%f\n',
  scenario_name, carbon_cost, p, z, 
  sum {v in VINTAGE_YEARS: v <= p < transmission_end_year[v]} InstallLocalTD[z, v]
  >> (outfile);

close (outfile);

